/*    CMSC 123 BC - Sorting Algorithms Comparison    Novesteras, Jessica Bea A.*/import java.util.Random;public class SortAlgo {    // Bubble Sort - from GeeksforGeeks    public static void bubbleSort(int arr[], int n) {        int i, j, temp;        boolean swapped;        for (i = 0; i < n - 1; i++) {            swapped = false;            for (j = 0; j < n - i - 1; j++) {                if (arr[j] > arr[j + 1]) {                    // Swap arr[j] and arr[j+1]                    temp = arr[j];                    arr[j] = arr[j + 1];                    arr[j + 1] = temp;                    swapped = true;                }            }            // If no two elements were swapped by inner loop, then break            if (swapped == false)                break;        }    }    // Insertion Sort - from GeeksforGeeks    public static void insertionSort(int arr[]) {        int n = arr.length;        for (int i = 1; i < n; ++i) {            int key = arr[i];            int j = i - 1;            /* Move elements of arr[0..i-1], that are               greater than key, to one position ahead               of their current position */            while (j >= 0 && arr[j] > key) {                arr[j + 1] = arr[j];                j = j - 1;            }            arr[j + 1] = key;        }    }    // Quick Sort - from GeeksforGeeks    public static void quickSort(int[] arr, int low, int high) {        if (low < high) {            // pi is the partition return index of pivot            int pi = partition(arr, low, high);            // Recursion calls for smaller elements            // and greater or equals elements            quickSort(arr, low, pi - 1);            quickSort(arr, pi + 1, high);        }    }    // partition method for quick sort    static int partition(int[] arr, int low, int high) {        // Choose the pivot        int pivot = arr[high];        // Index of smaller element and indicates        // the right position of pivot found so far        int i = low - 1;        // Traverse arr[low..high] and move all smaller        // elements to the left side. Elements from low to        // i are smaller after every iteration        for (int j = low; j <= high - 1; j++) {            if (arr[j] < pivot) {                i++;                swap(arr, i, j);            }        }        // Move pivot after smaller elements and        // return its position        swap(arr, i + 1, high);        return i + 1;    }    // swap method for quick sort    static void swap(int[] arr, int i, int j) {        int temp = arr[i];        arr[i] = arr[j];        arr[j] = temp;    }    // make array with random numbers inside    public static int[] makeRandomArray(int size) {        Random rand = new Random(123); // same seed so all tests use same data        int[] arr = new int[size];        for (int i = 0; i < size; i++) {            arr[i] = rand.nextInt(10000);        }        return arr;    }    // copy array for multiple runs so it uses the same set    public static int[] copyArray(int[] original) {        int[] copy = new int[original.length];        for (int i = 0; i < original.length; i++) {            copy[i] = original[i];        }        return copy;    }    // test sorting and measure the time it takes    public static double testSort(int[] arr, String sortType) {        int[] testArr = copyArray(arr);        long start = System.nanoTime();        switch (sortType) {            case "bubble":                bubbleSort(testArr, testArr.length);                break;            case "insertion":                insertionSort(testArr);                break;            case "quick":                quickSort(testArr, 0, testArr.length - 1);                break;        }        long end = System.nanoTime();        // convert to ms        return (double) (end - start) / 1000000;    }    // main method    public static void main(String[] args) {        // start / landing        System.out.println("\n----------------------------------------");        System.out.println("CMSC 123 - Sorting Algorithms Comparison");        System.out.println("Bubble Sort, Insertion Sort, and Quick Sort");        System.out.println("----------------------------------------\n");        // array sizes and how many runs        int[] sizes = {500, 10000, 100000};        int runs = 5;        for (int size : sizes) {            System.out.println("Testing with array size: " + size);            // initialize the test array            int[] test = makeRandomArray(size);            // test bubble sort            double bubbleTotal = 0;            System.out.println("Bubble Sort : ");            for (int i = 0; i < runs; i++) {                double time = testSort(test, "bubble");                bubbleTotal += time;                System.out.printf("Run #%2d : %.3f ms\n", (i+1), time);            }            double bubbleAve = bubbleTotal / runs; // average time in ms            // test insertion sort            double insertionTotal = 0;            System.out.println("Insertion Sort : ");            for (int i = 0; i < runs; i++) {                double time = testSort(test, "insertion");                insertionTotal += time;                System.out.printf("Run #%2d : %.3f ms\n", (i+1), time);            }            double insertionAve = insertionTotal / runs; // average time in ms            // test quick sort            double quickTotal = 0;            System.out.println("Quick Sort : ");            for (int i = 0; i < runs; i++) {                double time = testSort(test, "quick");                quickTotal += time;                System.out.printf("Run #%2d : %.3f ms\n", (i+1), time); // average time in ms            }            double quickAve = quickTotal / runs;            // results            System.out.println("\n----------------------------------------");            System.out.println("RESULTS for size " + size + ":");            System.out.printf("Bubble Sort Ave Run Time : %.3f ms\n", bubbleAve);            System.out.printf("Insertion Sort Ave Run Time : %.3f ms\n", insertionAve);            System.out.printf("Quick Sort Ave Run Time : %.3f ms\n", quickAve);            System.out.println("----------------------------------------\n");        }    }}